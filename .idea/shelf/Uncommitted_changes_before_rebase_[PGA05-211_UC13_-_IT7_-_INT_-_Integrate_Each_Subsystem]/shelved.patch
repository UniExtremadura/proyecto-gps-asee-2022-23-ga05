Index: app/src/main/java/es/unex/dinopedia/Dinosaurio.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/es/unex/dinopedia/Dinosaurio.java b/app/src/main/java/es/unex/dinopedia/Dinosaurio.java
new file mode 100644
--- /dev/null	(date 1669063324769)
+++ b/app/src/main/java/es/unex/dinopedia/Dinosaurio.java	(date 1669063324769)
@@ -0,0 +1,194 @@
+package es.unex.dinopedia;
+
+import androidx.room.Entity;
+import androidx.room.Ignore;
+import androidx.room.PrimaryKey;
+
+import com.google.gson.annotations.Expose;
+import com.google.gson.annotations.SerializedName;
+
+import java.util.Objects;
+
+@Entity(tableName = "Dinosaurio")
+public class Dinosaurio {
+
+	@Ignore
+	public static final String ITEM_SEP = System.getProperty("line.separator");
+
+	@SerializedName("id")
+	@Expose
+	@PrimaryKey(autoGenerate = true)
+	private long id;
+	@SerializedName("name")
+	@Expose
+	private String name;
+	@SerializedName("diet")
+	@Expose
+	private String diet;
+	@SerializedName("lived_in")
+	@Expose
+	private String livedIn;
+	@SerializedName("type")
+	@Expose
+	private String type;
+	@SerializedName("species")
+	@Expose
+	private String species;
+	@SerializedName("period_name")
+	@Expose
+	private String periodName;
+	@SerializedName("length_meters")
+	@Expose
+	private String lengthMeters;
+	@SerializedName("favorite")
+	@Expose
+	private String favorite;
+
+	/**
+	 * No args constructor for use in serialization
+	 *
+	 */
+	@Ignore
+	public Dinosaurio() {
+	}
+
+	/**
+	 *
+	 * @param livedIn
+	 * @param species
+	 * @param name
+	 * @param periodName
+	 * @param diet
+	 * @param type
+	 * @param lengthMeters
+	 * @param favorite
+	 */
+	@Ignore
+	public Dinosaurio(String name, String diet, String livedIn, String type, String species, String periodName, String lengthMeters, String favorite) {
+		super();
+		this.name = name;
+		this.diet = diet;
+		this.livedIn = livedIn;
+		this.type = type;
+		this.species = species;
+		this.periodName = periodName;
+		this.lengthMeters = lengthMeters;
+		this.favorite = favorite;
+	}
+
+	public Dinosaurio(long id, String name, String diet, String livedIn, String type, String species, String periodName, String lengthMeters, String favorite) {
+		super();
+		this.id = id;
+		this.name = name;
+		this.diet = diet;
+		this.livedIn = livedIn;
+		this.type = type;
+		this.species = species;
+		this.periodName = periodName;
+		this.lengthMeters = lengthMeters;
+		this.favorite = favorite;
+	}
+
+	public long getId() {
+		return id;
+	}
+
+	public void setId(long id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public String getDiet() {
+		return diet;
+	}
+
+	public void setDiet(String diet) {
+		this.diet = diet;
+	}
+
+	public String getLivedIn() {
+		return livedIn;
+	}
+
+	public void setLivedIn(String livedIn) {
+		this.livedIn = livedIn;
+	}
+
+	public String getType() {
+		return type;
+	}
+
+	public void setType(String type) {
+		this.type = type;
+	}
+
+	public String getSpecies() {
+		return species;
+	}
+
+	public void setSpecies(String species) {
+		this.species = species;
+	}
+
+	public String getPeriodName() {
+		return periodName;
+	}
+
+	public void setPeriodName(String periodName) {
+		this.periodName = periodName;
+	}
+
+	public String getLengthMeters() {
+		return lengthMeters;
+	}
+
+	public void setLengthMeters(String lengthMeters) {
+		this.lengthMeters = lengthMeters;
+	}
+
+	public String getFavorite() { return favorite;	}
+
+	public void setFavorite(String favorite) { this.favorite = favorite; }
+
+	@Override
+	public String toString() {
+		return "Dinosaurio{" +
+				"id=" + id +
+				", name='" + name + '\'' +
+				", diet='" + diet + '\'' +
+				", livedIn='" + livedIn + '\'' +
+				", type='" + type + '\'' +
+				", species='" + species + '\'' +
+				", periodName='" + periodName + '\'' +
+				", lengthMeters='" + lengthMeters + '\'' +
+				", favorite='" + favorite + '\'' +
+				'}';
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+		Dinosaurio that = (Dinosaurio) o;
+		return id == that.id && Objects.equals(name, that.name) && Objects.equals(diet, that.diet) && Objects.equals(livedIn, that.livedIn) && Objects.equals(type, that.type) && Objects.equals(species, that.species) && Objects.equals(periodName, that.periodName) && Objects.equals(lengthMeters, that.lengthMeters) && Objects.equals(favorite, that.favorite);
+	}
+
+	@Override
+	public int hashCode() {
+		return Objects.hash(id, name, diet, livedIn, type, species, periodName, lengthMeters, favorite);
+	}
+
+	public String toLog() {
+		return "ID: " + id + ITEM_SEP + "Name:" + name + ITEM_SEP + "Diet:" + diet
+				+ ITEM_SEP + "Live in:" + livedIn + ITEM_SEP + "Type:"
+				+ type + ITEM_SEP + "Species:" + species + ITEM_SEP + "Period:" + periodName
+				+ ITEM_SEP + "LengthMeters:" + lengthMeters + ITEM_SEP + "Favorite:" + favorite;
+	}
+}
\ No newline at end of file
Index: app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDao.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDao.java b/app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDao.java
new file mode 100644
--- /dev/null	(date 1669063324769)
+++ b/app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDao.java	(date 1669063324769)
@@ -0,0 +1,38 @@
+package es.unex.dinopedia.roomdb;
+
+import androidx.room.Dao;
+import androidx.room.Insert;
+import androidx.room.Query;
+import androidx.room.Update;
+
+import java.util.List;
+
+import es.unex.dinopedia.Dinosaurio;
+
+@Dao
+public interface DinosaurioDao {
+
+    @Query("SELECT * FROM Dinosaurio")
+    List<Dinosaurio> getAll();
+
+    @Query("SELECT * FROM Dinosaurio WHERE id=:ID")
+    Dinosaurio getDinosaurioId(long ID);
+
+    @Insert
+    long insert(Dinosaurio item);
+
+    @Query("DELETE FROM Dinosaurio")
+    void deleteAll();
+
+    @Update
+    int update(Dinosaurio item);
+
+    @Query("SELECT COUNT (id) FROM Dinosaurio")
+    int count();
+
+    @Query("SELECT * FROM Dinosaurio WHERE favorite='1'")
+    List<Dinosaurio> getFavorito();
+
+    @Query("UPDATE Dinosaurio SET favorite='0'")
+    void quitarFavorite();
+}
Index: app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDatabase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDatabase.java b/app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDatabase.java
new file mode 100644
--- /dev/null	(date 1669063324769)
+++ b/app/src/main/java/es/unex/dinopedia/roomdb/DinosaurioDatabase.java	(date 1669063324769)
@@ -0,0 +1,23 @@
+package es.unex.dinopedia.roomdb;
+
+import android.content.Context;
+
+import androidx.room.Database;
+import androidx.room.Room;
+import androidx.room.RoomDatabase;
+
+import es.unex.dinopedia.Dinosaurio;
+
+@Database(entities = {Dinosaurio.class}, version  =1)
+public abstract class DinosaurioDatabase extends RoomDatabase {
+    private static DinosaurioDatabase instance;
+
+    public static DinosaurioDatabase getInstance(Context context) {
+        if (instance == null){
+            instance = Room.databaseBuilder(context, DinosaurioDatabase.class, "JURASSICPARK.db").build();
+        }
+        return instance;
+    }
+
+    public abstract DinosaurioDao getDao();
+}
Index: app/src/main/java/es/unex/dinopedia/DinosaurioAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/es/unex/dinopedia/DinosaurioAdapter.java b/app/src/main/java/es/unex/dinopedia/DinosaurioAdapter.java
new file mode 100644
--- /dev/null	(date 1669063324769)
+++ b/app/src/main/java/es/unex/dinopedia/DinosaurioAdapter.java	(date 1669063324769)
@@ -0,0 +1,110 @@
+package es.unex.dinopedia;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import androidx.recyclerview.widget.RecyclerView;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class DinosaurioAdapter extends RecyclerView.Adapter<DinosaurioAdapter.ViewHolder> {
+    private List<Dinosaurio> mItems = new ArrayList<Dinosaurio>();
+    Context mContext;
+
+    public interface OnItemClickListener {
+        void onItemClick(Dinosaurio item);     //Type of the element to be returned
+    }
+
+    private final OnItemClickListener listener;
+
+    // Provide a suitable constructor (depends on the kind of dataset)
+    public DinosaurioAdapter(Context context, OnItemClickListener listener) {
+        mContext = context;
+        this.listener = listener;
+    }
+
+    // Create new views (invoked by the layout manager)
+    @Override
+    public ViewHolder onCreateViewHolder(ViewGroup parent,
+                                                           int viewType) {
+        // - Inflate the View for every element
+        View v = LayoutInflater.from(parent.getContext())
+                .inflate(R.layout.dinosaurio_info, parent, false);
+
+        return new ViewHolder(mContext,v);
+    }
+
+    // Replace the contents of a view (invoked by the layout manager)
+    @Override
+    public void onBindViewHolder(ViewHolder holder, int position) {
+        holder.bind(mItems.get(position),listener);
+    }
+
+    // Return the size of your dataset (invoked by the layout manager)
+    @Override
+    public int getItemCount() {
+
+        return mItems.size();
+    }
+
+    public void add(Dinosaurio item) {
+
+        mItems.add(item);
+        notifyDataSetChanged();
+
+    }
+
+    public void clear(){
+
+        mItems.clear();
+        notifyDataSetChanged();
+
+    }
+
+    public void load(List<Dinosaurio> items){
+
+        mItems.clear();
+        mItems = items;
+        notifyDataSetChanged();
+
+    }
+
+    public Object getItem(int pos) {
+        return mItems.get(pos);
+    }
+
+     static class ViewHolder extends RecyclerView.ViewHolder {
+
+         private final Context mContext;
+
+        private final TextView nombre;
+
+        public ViewHolder(Context context, View itemView) {
+            super(itemView);
+
+            mContext = context;
+
+            // - Get the references to every widget of the Item View
+
+            nombre =  itemView.findViewById(R.id.nombreD);
+        }
+
+        public void bind(final Dinosaurio dinosaurio, final OnItemClickListener listener) {
+
+            // - Display Nombre in TextView
+            nombre.setText(dinosaurio.getName());
+
+            itemView.setOnClickListener(new View.OnClickListener() {
+
+                @Override
+                public void onClick(View v) {
+                    listener.onItemClick(dinosaurio);
+                }
+            });
+        }
+    }
+}
Index: app/src/main/java/es/unex/dinopedia/DinosaurioManagerActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/es/unex/dinopedia/DinosaurioManagerActivity.java b/app/src/main/java/es/unex/dinopedia/DinosaurioManagerActivity.java
new file mode 100644
--- /dev/null	(date 1669063324769)
+++ b/app/src/main/java/es/unex/dinopedia/DinosaurioManagerActivity.java	(date 1669063324769)
@@ -0,0 +1,196 @@
+package es.unex.dinopedia;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.appcompat.widget.Toolbar;
+import androidx.recyclerview.widget.LinearLayoutManager;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.google.android.material.snackbar.Snackbar;
+
+import java.util.List;
+
+//import es.unex.dinopedia.database.DinosaurioCRUD;
+import es.unex.dinopedia.roomdb.DinosaurioDatabase;
+
+public class DinosaurioManagerActivity extends AppCompatActivity {
+
+  // Add a ToDoItem Request Code
+    private static final int ADD_TODO_ITEM_REQUEST = 0;
+
+    private static final String TAG = "Lab-UserInterface";
+
+    // IDs for menu items
+    private static final int MENU_DELETE = Menu.FIRST;
+    private static final int MENU_DUMP = Menu.FIRST + 1;
+
+    private RecyclerView mRecyclerView;
+    private RecyclerView.LayoutManager mLayoutManager;
+    private DinosaurioAdapter mAdapter;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_to_do_manager);
+        Toolbar toolbar = findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+
+        // - Get a reference to the RecyclerView
+        mRecyclerView = findViewById(R.id.my_recycler_view);
+
+        // use this setting to improve performance if you know that changes
+        // in content do not change the layout size of the RecyclerView
+        mRecyclerView.setHasFixedSize(true);
+
+        // use a linear layout manager
+        // - Set a Linear Layout Manager to the RecyclerView
+        mLayoutManager = new LinearLayoutManager(this);
+        mRecyclerView.setLayoutManager(mLayoutManager);
+
+        // - Create a new Adapter for the RecyclerView
+        // specify an adapter (see also next example)
+        View view = findViewById(android.R.id.content);
+        mAdapter = new DinosaurioAdapter(this, new DinosaurioAdapter.OnItemClickListener() {
+            @Override public void onItemClick(Dinosaurio item) {
+                Snackbar.make(view, "Item "+item.getName()+" Clicked", Snackbar.LENGTH_LONG).show();
+            }
+        });
+
+        // - Attach the adapter to the RecyclerView
+        mRecyclerView.setAdapter(mAdapter);
+
+        //DinosaurioCRUD crud = DinosaurioCRUD.getInstance(this);
+        DinosaurioDatabase.getInstance(this);
+    }
+    /*
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode,resultCode,data);
+        log("Entered onActivityResult()");
+
+        //  - Check result code and request code.
+        // If user submitted a new ToDoItem
+        // Create a new ToDoItem from the data Intent
+        // and then add it to the adapter
+        if (requestCode == ADD_TODO_ITEM_REQUEST){
+            if (resultCode == RESULT_OK){
+                Dinosaurio item = new Dinosaurio(data);
+
+                //insert into DB
+                DinosaurioCRUD crud = DinosaurioCRUD.getInstance(this);
+                long id = crud.insert(item);
+
+                AppExecutors.getInstance().diskIO().execute(new Runnable() {
+                    @Override
+                    public void run() {
+                        DinosaurioDatabase database = DinosaurioDatabase.getInstance(DinosaurioManagerActivity.this);
+                        long id = database.getDao().insert(item);
+
+                        //update item ID
+                        item.setId(id);
+
+                        //insert into adapter list
+                        runOnUiThread(() -> mAdapter.add(item));
+                    }
+                });
+            }
+        }
+    }
+    */
+    @Override
+    public void onResume() {
+        super.onResume();
+
+        // Load saved ToDoItems, if necessary
+
+        //if (mAdapter.getItemCount() == 0)
+            //loadItems();
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        // ALTERNATIVE: Save all ToDoItems
+
+    }
+/*
+    @Override
+    protected void onDestroy() {
+        DinosaurioCRUD crud = DinosaurioCRUD.getInstance(this);
+        DinosaurioDatabase.getInstance(this).close();
+        crud.close();
+        super.onDestroy();
+    }
+*/
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        super.onCreateOptionsMenu(menu);
+
+        menu.add(Menu.NONE, MENU_DELETE, Menu.NONE, "Delete all");
+        menu.add(Menu.NONE, MENU_DUMP, Menu.NONE, "Dump to log");
+        return true;
+    }
+/*
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case MENU_DELETE:
+                DinosaurioCRUD crud = DinosaurioCRUD.getInstance(this);
+                crud.deleteAll();
+                AppExecutors.getInstance().diskIO().execute(new Runnable() {
+                    @Override
+                    public void run() {
+                        DinosaurioDatabase.getInstance(DinosaurioManagerActivity.this).getDao().deleteAll();
+                       runOnUiThread(() -> mAdapter.clear());
+                    }
+                });
+
+                return true;
+            case MENU_DUMP:
+                dump();
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+*/
+    private void dump() {
+
+        for (int i = 0; i < mAdapter.getItemCount(); i++) {
+            String data = ((Dinosaurio) mAdapter.getItem(i)).toLog();
+            log("Item " + i + ": " + data.replace(Dinosaurio.ITEM_SEP, ","));
+        }
+
+    }
+/*
+    // Load stored Dinosaurios
+    private void loadItems() {
+        DinosaurioCRUD crud = DinosaurioCRUD.getInstance(this);
+        List<Dinosaurio> items = crud.getAll();
+
+        AppExecutors.getInstance().diskIO().execute(new Runnable() {
+            @Override
+            public void run() {
+                List<Dinosaurio> items = DinosaurioDatabase.getInstance(DinosaurioManagerActivity.this).getDao().getAll();
+                runOnUiThread( () -> mAdapter.load(items));
+            }
+        });
+
+    }
+*/
+    private void log(String msg) {
+        try {
+            Thread.sleep(500);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+        Log.i(TAG, msg);
+    }
+}
Index: app/src/main/res/layout/dinosaurio_info.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/dinosaurio_info.xml b/app/src/main/res/layout/dinosaurio_info.xml
new file mode 100644
--- /dev/null	(date 1669063324785)
+++ b/app/src/main/res/layout/dinosaurio_info.xml	(date 1669063324785)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/RelativeLayout1"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical" >
+
+    <TextView
+        android:id="@+id/nombreD"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginStart="0dp"
+        android:layout_marginTop="1dp"
+        android:text="Nombre del Dinosaurio"
+        android:textAppearance="?android:attr/textAppearanceLarge"></TextView>
+
+</RelativeLayout>
\ No newline at end of file
